### Вариант 1

Требуется разработать шаблонный класс отсортированный вектор.
- Для реализации вектора использовать наследование от касса вектор стандартной библиотеки.
- Для сортировки вектора использовать функцию стандартной библиотеки.

1) Реализовать метод, который проверяет количество элементов в векторе, делящихся нацело на введенное пользователем число. 
    Использовать лямбда-выражение.

2) Создайте конструктор который принимает std::initializer_list<T> для инициализации через фигурные скобки и сортирует содержимое вектора.

3) Перегрузить дружественную функцию - оператор вывода данных в поток (использовать* std::copy)

4) Перегрузить функцию insert которая позволит вставлять элемент в первую позицию, 
    в которую можно поместить элемент не изменив порядка следования объектов. 
    (Изначально insert принимает 2 аргумента – позиция, перед которой надо вставить новый элемент и значение нового элемента.)

5) Реализовать метод, который выводит на экран все перестановки без повторений из содержимого данного вектора. 
    Пояснение: У вас в векторе лежат элементы 1, 2, 3. Вы должны вывести: 1 2 3 1 3 2 2 1 3 2 3 1

Объяснение функций из СБ, потому что ты их ... запомнишь:

std::count_if 
    стандартная функция из <algorithm>,
    которая подсчитывает количество элементов в диапазоне, 
    для которых переданное условие возвращает true.

std::initializer_list<T> 
    аргумент позволяет инициализировать вектор через список значений, 
    указанных в фигурных скобках (например, {1, 2, 3, 4}), 
    где T — это тип элементов, определённый для вектора (int, double и т.д.).

    это специальный тип в C++ стандартной библиотеки, 
    который позволяет передавать список инициализаторов в фигурных скобках {} 
    при создании объекта. Этот тип упрощает инициализацию объектов несколькими значениями сразу,
    не требуя создавать отдельные массивы или вектора.

std::ostream_iterator<T> 
    это итератор из стандартной библиотеки C++, 
    который используется для записи значений в поток вывода.
    Он позволяет вам записывать элементы контейнера в поток с заданным разделителем.

    Конструктор std::ostream_iterator<T>(os, " ") принимает два параметра:
    os — ссылку на поток вывода, куда будут записываться данные
    " " — строка, которая будет использоваться как разделитель между элементами

std::upper_bound 
    это функция из стандартной библиотеки C++, 
    которая используется для поиска позиции в отсортированном диапазоне, 
    где может быть вставлен элемент, чтобы сохранить порядок.
    
std::vector<T>::insert 
    это метод класса std::vector в C++, 
    который используется для вставки элементов в вектор в указанную позицию.

std::next_permutation 
    это функция из стандартной библиотеки C++, 
    которая используется для генерации следующей лексикографической перестановки 
    последовательности элементов. Она изменяет порядок элементов в контейнере, 
    чтобы получить следующую перестановку по сравнению с текущей. 
    Если следующей перестановки не существует, 
    функция переставляет элементы так, чтобы получить минимальную последовательность, 
    то есть отсортированную по возрастанию.